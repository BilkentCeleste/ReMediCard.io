import {
  getFetcher,
  postFetcher,
  putFetcher,
  patchFetcher,
  deleteFetcher,
} from "./apiHelper";
import * as url from "./urlHelper";

/**
 * @author Faruk UÃ§gun
 * @date 18.12.2024
 * @abstract: This file is responsible for making requests to backend
 */

// auth
export const login = async (data) => {
  return await postFetcher(url.LOGIN_PATH(), data);
};

export const register = async (data) => {
  return await postFetcher(url.REGISTER_PATH(), data);
};

// deck
export const createDeck = async (data) => {
  return await postFetcher(url.CREATE_DECK_PATH(), data);
};

export const deleteDeck = async (id) => {
  return await deleteFetcher(url.DELETE_DECK_PATH(id));
};

export const getDecksByCurrentUser = async () => {
  return await getFetcher(url.GET_DECKS_BY_CURRENT_USER());
};

export const getDeckByDeckId = async (id) => {
  return await getFetcher(url.GET_DECK_BY_DECK_ID_PATH(id));
};

export const getDecksByUserId = async (id) => {
  return await getFetcher(url.GET_DECKS_BY_USER_ID_PATH(id));
};

export const shareDeck = async (id) => {
    return await postFetcher(url.SHARE_DECK_PATH(id));
}

// flashcard
export const createFlashcard = async (data) => {
  return await postFetcher(url.CREATE_FLASHCARD_PATH(), data);
};

export const updateFlashcard = async (id, data) => {
  return await putFetcher(url.UPDATE_FLASHCARD_PATH(id), data);
};

export const deleteFlashcard = async (id, data) => {
  return await deleteFetcher(url.DELETE_FLASHCARD_PATH(id), data);
};

export const getFlashcardsInBatch = async (deckId) => {
  return await getFetcher(url.GET_FLASHCARDS_IN_BATCH_PATH(deckId));
};

export const updateFlashcardReviews = async (data) => {
  return await postFetcher(url.UPDATE_FLASHCARD_REVIEWS_PATH(), data);
}

export const generateDeck = async (data) => {
  return await postFetcher(url.GENERATE_DECK_PATH(), data, "multipart/form-data");
};

export const sendForgotPasswordCode = async (data) => {
  return await postFetcher(url.FORGOT_PASSWORD_PATH(), data);
};

export const verifyResetPasswordcode = async (data) => {
  return await postFetcher(url.VERIFY_RESET_PASSWORD_CODE_PATH(), data);
};

export const resetPassword = async (data) => {
  return await postFetcher(url.RESET_PASSWORD_PATH(), data);
};

export const createFeedback = async (data) => {
  return await postFetcher(url.CREATE_FEEDBACK_PATH(), data);
};

export const autoGenerateDeck = async (formData) => {
  return await postFetcher(url.AUTO_GENERATE_DECK_PATH(), formData, "multipart/form-data");
};

// quiz
export const getQuizzesByCurrentUser = async () => {
  return await getFetcher(url.GET_QUIZZES_BY_CURRENT_USER_PATH());
};

export const deleteQuiz = async (id) => {
  return await deleteFetcher(url.DELETE_QUIZ_PATH(id));
};

export const createQuiz = async (data) => {
  return await postFetcher(url.CREATE_QUIZ_PATH(), data);
};

export const getQuizByQuizId = async (id) => {
  return await getFetcher(url.GET_QUIZ_BY_QUIZ_ID_PATH(id));
};

export const removeQuestion = async (id, data) => {
  return await postFetcher(url.REMOVE_QUESTION_PATH(id), data);
};

export const autoGenerateQuiz = async (formData) => {
  return await postFetcher(
    url.AUTO_GENERATE_QUIZ_PATH(),
    formData,
    "multipart/form-data"
  );
};

export const getUserProfile = async () => {
  return await getFetcher(url.GET_USER_PROFILE());
};

export const createQuestion = async (data) => {
    return await postFetcher(url.CREATE_QUESTION_PATH(), data);
}

export const editQuestion = async (id, data) => {
    return await putFetcher(url.EDIT_QUESTION_PATH(id), data);
}

export const generateShareToken = async (id) => {
  return await postFetcher(url.GENERATE_SHARE_TOKEN_PATH(id));
};

export const getQuizByShareToken = async (shareToken) => {
  return await getFetcher(url.GET_QUIZ_BY_SHARE_TOKEN_PATH(shareToken));
};

export const addUserQuiz = async (id) => {
  return await postFetcher(url.ADD_USER_QUIZ_PATH(id));
};
